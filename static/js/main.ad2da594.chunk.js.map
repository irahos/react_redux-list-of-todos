{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","removeTodo","currentTodoReducer","state","arguments","length","undefined","action","initialState","status","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","_ref","dispatch","getFilteredTodos","filteredTodos","normalizedQuery","toLowerCase","trim","_ref2","title","includes","completed","_jsxs","_Fragment","children","_jsx","className","map","classNames","id","onClick","currentTodoActions","openModal","TodoFilter","onSubmit","event","preventDefault","value","onChange","selectedStatus","target","FilterActions","placeholder","handleQueryChange","queryToSet","style","pointerEvents","handleClearQuery","Loader","get","url","fullURL","delay","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedUser","setSelectedUser","useState","isLoading","setIsLoading","useEffect","userId","concat","catch","e","console","log","finally","onCloseModal","href","email","name","App","loadedTodos","TodosActions","Root","Provider","Router","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad2da594.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = { type: 'filter/STATUS', payload: Status };\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst initialState: State = {\n  status: 'all',\n  query: '',\n};\n\ntype State = {\n  status: Status,\n  query: string,\n};\n\nexport const actions = { setQuery, setStatus };\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype State = Todo[] | [];\n\nexport const actions = { setTodos };\n\nconst todosReducer = (state: State = [], action: SetTodosAction): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...state, ...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const query = useAppSelector((state) => state.filter.query);\n  const status = useAppSelector((state) => state.filter.status);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useDispatch();\n\n  const getFilteredTodos = () => {\n    let filteredTodos = [...todos];\n\n    if (query) {\n      const normalizedQuery = query.toLowerCase().trim();\n\n      filteredTodos = filteredTodos.filter(({ title }) => title.toLowerCase().includes(normalizedQuery));\n    }\n\n    if (status) {\n      switch (status) {\n        case 'completed':\n          filteredTodos = filteredTodos.filter(todo => todo.completed);\n          break;\n\n        case 'active':\n          filteredTodos = filteredTodos.filter(todo => !todo.completed);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return filteredTodos;\n  };\n\n  const openModal = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!getFilteredTodos() && (\n        <p className=\"notification is-warning\">\n          There are no todos matching the current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {getFilteredTodos().map((todo: Todo) => (\n            <tr data-cy=\"todo\" className={classNames({ 'has-background-info-light': currentTodo })}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                )}\n              </td>\n              <td className=\"is-vcentered\"> </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => openModal(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far', {\n                        'fa-eye': currentTodo?.id !== todo.id,\n                        'fa-eye-slash': currentTodo?.id === todo.id,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n\n  const dispatch = useAppDispatch();\n\n  const handleQueryChange = (queryToSet: string) => {\n    dispatch(FilterActions.setQuery(queryToSet));\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedStatus = event.target.value as Status;\n\n    dispatch(FilterActions.setStatus(selectedStatus));\n  };\n\n  const handleClearQuery = () => {\n    dispatch(FilterActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Search...\"\n          onChange={(event) => handleQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setSelectedUser)\n        // eslint-disable-next-line no-console\n        .catch((e) => console.log(`${e}`))\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  const onCloseModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {currentTodo && !isLoading && selectedUser && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              <a href={selectedUser?.email}>{selectedUser?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as TodosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((loadedTodos) => dispatch(TodosActions.setTodos(loadedTodos)))\n      // eslint-disable-next-line no-console\n      .catch((e) => console.log(`${e}`))\n      .finally(() => setIsLoading(false));\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!!todos.length && <TodoList todos={todos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}